"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import secrets

from .pre_settings import get_DIAMOND_version, get_env, get_latest_git_tag

# GLOBAL VARIABLES: registered in context_processors.py
BCA_WEBSITE = "https://biodiversitycellatlas.org"
BCA_DOMAIN = "biodiversitycellatlas.org"
BCA_EMAIL = "bca@biodiversitycellatlas.org"
FEEDBACK_URL = get_env("BCA_APP_FEEDBACK_URL", required=True)

# Script should be adapted according to what is collected https://plausible.io/docs/plausible-script
# PLAUSIBLE_SCRIPT = "https://stats.biodiversitycellatlas.org/js/script.file-downloads.hash.outbound-links.pageview-props.tagged-events.js"

GITHUB_URL = "https://github.com/biodiversitycellatlas/bca-website"
GITHUB_ISSUES_URL = GITHUB_URL + "/issues/new"
GIT_VERSION = get_latest_git_tag()
GIT_VERSION_URL = f"{GITHUB_URL}/releases/tag/{GIT_VERSION}"

DIAMOND_VERSION = get_DIAMOND_version()

# Max sequences for alignment
MAX_ALIGNMENT_SEQS = get_env("BCA_APP_MAX_ALIGNMENT_SEQS", 100, type="int")

# Max file upload size in MB
MAX_FILE_SIZE = get_env("BCA_APP_MAX_FILE_SIZE", 10, type="int")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

ALLOWED_HOSTS = get_env("DJANGO_ALLOWED_HOSTS", "", type="array")
DEBUG = get_env("DJANGO_DEBUG", type="bool")
SECRET_KEY = get_env("DJANGO_SECRET_KEY")

if get_env("ENVIRONMENT") == "prod":
    # Production environment
    DEBUG = False

    # Avoid using insecure key
    if SECRET_KEY.startswith("django-insecure"):
        SECRET_KEY = secrets.token_hex(50)

    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 30

# Application definition

INSTALLED_APPS = [
    "app.apps.AppConfig",
    "rest.apps.RestConfig",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_filters",
    "colorfield",
    "drf_spectacular",
    "django_extensions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if DEBUG:
    INSTALLED_APPS += ["debug_toolbar"]
    MIDDLEWARE = ["debug_toolbar.middleware.DebugToolbarMiddleware"] + MIDDLEWARE
    INTERNAL_IPS = get_env("DJANGO_INTERNAL_IPS", "", type="array")

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "config.context_processors.global_settings",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": get_env("POSTGRES_DB"),
        "USER": get_env("POSTGRES_USER"),
        "PASSWORD": get_env("POSTGRES_PASSWORD"),
        "HOST": get_env("POSTGRES_HOST"),
        "PORT": get_env("POSTGRES_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images) and Media
# https://docs.djangoproject.com/en/5.1/howto/static-files/
# https://docs.djangoproject.com/en/5.1/topics/files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = "/data/"
MEDIA_ROOT = os.path.join(BASE_DIR, "data")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST settings

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [],  # no permissions required
    "DEFAULT_PERMISSION_CLASSES": [],  # no permissions required
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest.pagination.StandardPagination",
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest.renderers.CSVRenderer",
        "rest.renderers.TSVRenderer",
    ],
}


def sort_api_tags(operation):
    """Sort API tags."""

    return ["Species", "Gene", "Metacell", "Single cell", "Sequence alignment"]


SPECTACULAR_SETTINGS = {
    "TITLE": "Biodiversity Cell Atlas: Data Portal API",
    "DESCRIPTION": "Fetch pre-processed and processed [BCA](/) data",
    "CONTACT": {"name": "BCA", "url": "/about"},
    "TOS": "/about/legal",
    "VERSION": get_env("BCA_REST_VERSION"),
    "SERVE_INCLUDE_SCHEMA": False,
    "SORT_OPERATIONS": sort_api_tags,
}

# Logging in console

if get_env("DJANGO_LOGGING", type="bool"):
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "console": {
                "level": "DEBUG",
                "class": "logging.StreamHandler",
            },
        },
        "loggers": {
            "django.db.backends": {
                "handlers": ["console"],
                "level": "DEBUG",
            },
        },
    }
