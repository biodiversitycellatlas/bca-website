name: Security Checks

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    schedule:
        # Run every Wednesday at 7h
        - cron: '0 7 * * 3'
    workflow_dispatch:

permissions:
  contents: read

jobs:
    bandit:
        name: Bandit Python security check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - uses: actions/setup-python@v5
              with:
                  python-version: '3.13'

            - name: Install dependencies
              run: pip install bandit -r requirements.txt

            - name: Run Bandit
              run: bandit -r . -x ./scripts --severity-level high

    django-ci:
        name: Django CI
        runs-on: ubuntu-latest
        services:
            db:
                image: postgres:17
                env:
                    PGUSER: postgres
                    POSTGRES_USER: postgres
                    POSTGRES_DB: bca
                    POSTGRES_PASSWORD: pg_password
                    POSTGRES_HOST_AUTH_METHOD: trust
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd="pg_isready"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Ensure postgres DB exists
              run: psql -U postgres -h db -c "CREATE DATABASE postgres;" || echo "Database postgres already exists"
              env:
                PGPASSWORD: pg_password

            - name: Export .env variables
              run: |
                cp .env.template .env
                set -a
                source .env
                env > $GITHUB_ENV
                printenv | sort
              shell: bash

            - uses: actions/setup-python@v5
              with:
                  python-version: '3.13'

            - name: Install dependencies
              run: pip install -r requirements.txt

            - name: Install coverage
              run: pip install coverage

            - name: Run deployment check
              run: python manage.py check --deploy
              env:
                POSTGRES_HOST: db
                POSTGRES_DB: bca
                PGUSER: postgres
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: pg_password
                POSTGRES_PORT: 5432

            - name: Run tests with coverage
              run: coverage run manage.py test
              env:
                POSTGRES_HOST: db
                POSTGRES_DB: bca
                PGUSER: postgres
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: pg_password
                POSTGRES_PORT: 5432

            - name: Show coverage report
              run: coverage report

    trivy:
        name: Trivy Docker image scan
        runs-on: ubuntu-latest

        permissions:
            contents: read
            security-events: write # upload SARIF results

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              run: docker build -t bca-website:ci .

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: bca-website:ci
                format: 'template'
                template: '@/contrib/sarif.tpl'
                output: 'trivy-results.sarif'
                severity: 'CRITICAL,HIGH'

            - name: Upload results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              with:
                sarif_file: 'trivy-results.sarif'
